version: '3.7'
services:
  frontend:
    build:
      context: ./services/frontend
    command: yarn dev
    depends_on:
      - worker
    volumes:
      - "./services/frontend/site:/storedog-app/site"
    ports:
      - 8088:3000

  nginx:
    build:
      context: ./services/nginx
    restart: always
    ports:
      - "80:80"
    depends_on:
      - frontend

  postgres:
    image: postgres:13-alpine
    restart: always
    environment:
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - 'postgres:/var/lib/postgresql/data'
      - ./services/backend/db/restore:/docker-entrypoint-initdb.d
      - ./services/backend/db/postgresql.conf:/postgresql.conf
      - ./services/dbm/dbm_setup.sql:/etc/postgresql/13/main/dbm_setup.sql
      - ./services/dbm/dbm_exec.sh:/dbm_exec.sh
    command: ["postgres", "-c", "config_file=/postgresql.conf"]

  redis:
    image: redis:6.2-alpine
    volumes:
      - 'redis:/data'

  web:
    depends_on:
      - 'postgres'
      - 'redis'
    build:
      context: ./services/backend
    ports:
      - '8140:4000'
    volumes:
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1

  worker:
    depends_on:
      - 'postgres'
      - 'redis'
      - 'web'
    build:
      context: ./services/backend
    command: bundle exec sidekiq -C config/sidekiq.yml
    volumes:
      - .env:/app/.env
    environment:
      REDIS_URL: redis://redis:6379/0
      DB_HOST: postgres
      DB_PORT: 5432
      DISABLE_SPRING: 1

  ads:
    depends_on:
      - postgres
    environment:
      - FLASK_APP=ads.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
    build:
      context: ./services/ads/python
    command: flask run --port=${ADS_PORT} --host=0.0.0.0 # If using any other port besides the default 9292, overriding the CMD is required
    volumes:
      - ./services/ads/python:/app
    ports:
      - "${ADS_PORT}:${ADS_PORT}"

  discounts:
    depends_on:
      - postgres
    environment:
      - FLASK_APP=discounts.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
    build:
      context: ./services/discounts
    command: ./my-wrapper-script.sh ${DISCOUNTS_PORT}
    volumes:
      - ./services/discounts:/app
    ports:
      - "${DISCOUNTS_PORT}:${DISCOUNTS_PORT}"

  auth:
    depends_on:
      - postgres
    profiles:
      - csrf
    environment:
      - FLASK_APP=auth.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
    build:
      context: ./services/auth
    command: gunicorn --bind 0.0.0.0:${AUTH_PORT} auth:app # If using any other port besides the default 8282, overriding the CMD is required
    volumes:
      - "./services/auth:/app"
    ports:
      - "${AUTH_PORT}:${AUTH_PORT}"

  dbm:
    depends_on:
      - postgres
    profiles:
      - dbm
    environment:
      - FLASK_APP=dbm.py
      - FLASK_DEBUG=1
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_HOST=postgres
    build:
      context: ./services/dbm
    command: gunicorn --bind 0.0.0.0:${DBM_PORT} dbm:app # If using any other port besides the default 8282, overriding the CMD is required
    volumes:
      - "./services/dbm:/app"
    ports:
      - "${DBM_PORT}:${DBM_PORT}"

  ads-java:
    build:
      context: ./services/ads/java
    ports:
      - "8888:8080"

  attackbox:
    build:
      context: ./services/attackbox
    profiles:
      - attackbox
    environment:
      - ATTACK_GOBUSTER
      - ATTACK_HYDRA
      - ATTACK_GOBUSTER_INTERVAL
      - ATTACK_HYDRA_INTERVAL
      - ATTACK_SSH
      - ATTACK_SSH_INTERVAL
      - ATTACK_HOST
      - ATTACK_PORT
    depends_on:
      - web
      - discounts

volumes:
  redis:
  postgres:
  bundle_cache:
